use std::{env, fs, path::Path};

fn main() {
    let out_dir = env::var_os("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("ast.rs");

    let mut contents = String::new();

    // (name, members)
    let mut structs: Vec<(&str, String)> = Vec::new();
    let mut enums: Vec<(String, String)> = Vec::new();

    structs.push(("Expression", String::from("Box<Equality>")));

    let binaries = [
        ("Equality", vec!["Equal", "NotEqual"]),
        (
            "Comparison",
            vec![
                "LessThan",
                "LessThanOrEqual",
                "GreaterThan",
                "GreaterThanOrEqual",
            ],
        ),
        ("Term", vec!["Add", "Subtract"]),
        ("Factor", vec!["Multiply", "Divide"]),
    ];

    for i in 0..binaries.len() {
        let (name, operators) = &binaries[i];
        let higher = if let Some((higher, _)) = binaries.get(i + 1) {
            higher
        } else {
            "Unary"
        };

        structs.push((
            name,
            format!("Box<{}>, Vec<({}Operator, Box<{}>)>", higher, name, higher),
        ));

        enums.push((format!("{}Operator", name), operators.join(", ")));
    }

    structs.push(("Unary", String::from("UnaryOperator, UnaryType")));
    enums.push((String::from("UnaryOperator"), String::from("Not, Minus")));
    enums.push((
        String::from("UnaryType"),
        String::from("Unary(Box<Unary>), Primary(Box<Primary>)"),
    ));

    enums.push((
        String::from("Primary"),
        String::from(
            "Int(i64), Float(f64), String(String), Bool(bool), Expression(Box<Expression>)",
        ),
    ));

    contents +=
        &format!("pub trait Visitable {{\n\tfn accept(&mut self, visitor: &dyn Visitor);\n}}\n");

    let mut visitables = structs.iter().map(|(name, _)| name).collect::<Vec<_>>();
    visitables.push(&"Primary");

    let visitor_functions = visitables
        .iter()
        .map(|name| {
            let lower = name.to_lowercase();
            format!("\tfn visit_{}(&self, {}: &mut {});", lower, lower, name)
        })
        .collect::<Vec<_>>()
        .join("\n");

    contents += &format!("pub trait Visitor {{\n{}\n}}\n", visitor_functions);

    contents += &visitables
        .iter()
        .map(|name| {
            let lower = name.to_lowercase();
            format!(
                "impl Visitable for {} {{
    fn accept(&mut self, visitor: &dyn Visitor) {{
        visitor.visit_{}(self)
    }}
}}\n",
                name, lower
            )
        })
        .collect::<Vec<_>>()
        .join("");

    contents += &structs
        .iter()
        .map(|(name, members)| format!("pub struct {}({});\n", name, members))
        .collect::<Vec<_>>()
        .join("");

    contents += &enums
        .iter()
        .map(|(name, members)| format!("pub enum {} {{ {} }}\n", name, members))
        .collect::<Vec<_>>()
        .join("");

    fs::write(dest_path, contents).unwrap();

    println!("cargo:rerun-if-changed=build.rs");
}
